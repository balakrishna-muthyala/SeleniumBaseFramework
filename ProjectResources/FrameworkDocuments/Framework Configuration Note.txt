Download "apache-maven-3.3.9" and place it in "C" drive.

Create all Framework related classes&methods in "FrameworkPackage" under src/main/java 
Create all application classes&methods in Application packages ( 1 class file for 1 page in package) under src/main/java 

Create all test classes & test methods in testpackages ( 1 package for 1 test scenario/suite) under src/test/java 

Create all Input resources under "ProjectResources" to execute the project

Create all TestNgXml files under "TestCaseRunner" to execute the Test cases

Each class has to extends "FrameworkBase" Class.
Each Test Class should have constructor for getting the ClassName
Each Test Class should have @BeforeClass Method for initializing the FrameworkBase object
Each Page Class should have constructor to access the FrameworkBase object 

Test methods priority is not required, when we include the method names in testNg xml and running from testNg xml (If we give priority, it will consider only priority irrespective of testng xml flow")
Need to give priorities for test methods in testPackage, when we give only class name in testNg xml
Need to give priorities for test methods in testPackage, when we want to execute from java test class

TestNG xml File name = xml Suite name = Jenkins Job Name (Project name-Jenkins Job Name)
TestNG Test name = Test data test case name
TestNG Class name = testPackage java class name

ProjectResources/PropertiesFile for Project configuration variables
ProjectResources/TestData.xlsx for Test cases test data. Each Test should have one row in data sheet with TestClass / TestNg <test> name
ProjectResources/WebDriverFiles for WebDriver exe files

<build> tag is important in pom.xml to execute the "suiteXmlFile" from Jenkins
(ex. <suiteXmlFile>TestCaseRunner/VerifyCmLogin.xml</suiteXmlFile> Or <suiteXmlFile>${suiteXmlFile}</suiteXmlFile> )


Project -> Maven -> Update Project : for all changes in project level like manually placing jars in .m2 (or) any changes made in pom.xml
Project -> Run As -> Maven install : for installing dependency jars from internet (by taking pom.xml reference) into .m2 repository

Use the DriverClass (POJO) to start the batch execution using TestNg, before this fill the DriverSheet with TestNgXml names & Execution Flag. (Without Jenkins) 

-	Jenkins Job Configuration for Repository Code & Build :
	-	Git SourceCodeManagement: Repository URL -> https://github.com/balumuthyala/SeleniumBaseFramework
	-	Root POM for Local Code Build: F:\SELENIUM\selenium-projects\SeleniumBaseFramework\pom.xml
	-	Root POM for Remote Code Build: pom.xml
	-	Build: Goals and options -> test "-DsuiteXmlFile=TestCaseRunner/VerifyCmLogin.xml"

